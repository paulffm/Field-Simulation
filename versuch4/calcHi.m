%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%
% SUBROUTINE AUX_FIELD_2D
%
% Description: 
% This function calculates an arbitrary solenoidal magnetic field, for the determination
% of the equivalent magnetic charges of the megnetic scalar potential in 2D case.
%
% Inputs:
% msh  :  msh generated by cartMesh
% delta:  grid step in x, y, z directions (delta.dx, delta.dy, delta.dz)
% j    :  current vector
%
% Output: the magnetic field 
%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%

function h = calcHi(msh,j)

nx = msh.nx;
ny = msh.ny; 
nz = msh.nz;
np = msh.np;


dx = msh.xmesh(2)-msh.xmesh(1);
dy = msh.ymesh(2)-msh.ymesh(1); 

% Extraction of the 2D problem (if possible) from the 3D input %%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%

% check validity of the input current vector (for the 2D case all current elements must have one direction)
nzInd = find(j);
minInd = nzInd(1);
maxInd = nzInd(max(size(nzInd)));
if(maxInd<=2*np || minInd<=2*np) %z directed
    error('invalid current vector');
end

% test if each z-plane has the same look
Mz = nx*ny;
for k=1:nz-1
     if sum(j(2*np+1:2*np+Mz)-j(2*np+k*Mz+1:2*np+(k+1)*Mz))~=0
         error('current vector have to be similiar in every z-plane (need to be a 2D problem for this method)')
     end
end

    
% extract 1D current vector from the input vector 
j2d = j(2*np+1:2*np+nx*ny);
np2d = Mz;
% Algorithm for the solution of the 2D problem %%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%

%side lenghts
Lx = (nx-1)*dx; 
Ly = (ny-1)*dy;

%initializations
Itot = sum(j2d);
I = Itot;

h2d = zeros(2*np2d,1);
m = 1:nx-1; 
n = 1:ny-1;

%Ampere's law along the outermost loop
h2d(m) = I*dx/2/(Lx+Ly);
h2d(nx+(n-1)*nx+np2d) = I*dy/2/(Lx+Ly);
h2d(m+(ny-1)*nx) = -I*dx/2/(Lx+Ly);
h2d(1+(n-1)*nx+np2d) = -I*dy/2/(Lx+Ly);

h_rloop = I*(2*nx+ny)/2/(nx+ny);
for m=2:nx-1
    jexcl = j2d(m-1+(n-1)*nx); %exclude the current flux of the discarded surface
    I = I - sum(jexcl);       %rest current
    h_rloop = h_rloop - 2*h2d(m-1); % Ampere's law round the rest of the domain 
    h2d(m+(n-1)*nx+np2d) = -(I - h_rloop)*dy/Ly;
end

h_rloop = I*(nx+2*ny)/2/(nx+ny);
I = Itot;
for m=1:nx-1
    for n=1:ny-1
        h2d(m+n*nx) = -j2d(m+(n-1)*nx)+h2d(m+(n-1)*nx)+h2d(m+1+(n-1)*nx+np2d)-h2d(m+(n-1)*nx+np2d); 
    end
end

% Restore the 3D field vector from the 2D solution
h = [repmat(h2d(1:np2d), nz, 1); repmat(h2d(1+np2d:end), nz, 1); zeros(np,1)];